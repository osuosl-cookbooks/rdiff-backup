#!/bin/bash

# rdiff-backup MySQL job script for $JOB managed by Chef. Changes will be overwritten.

# This script is normally run by cron, but can be run manually to start the job if it is not already running.

FILE=`basename $0`
DIR=`dirname $0`
PIDFILE="$DIR/.$FILE.lock"
JOB="${FILE%.sh}"
LOGPATH='/var/log/rdiff-backup'
INSTANCES=`pgrep -fu <%= @suser %> $FILE | wc -l`

# Prepends date to every line of stdin, then writes to the general log file (as well as stdout).
function log() {
  sed "s/^/[`date +'%Y-%m-%d %H:%M:%S'`] /" | tee >(/usr/sbin/cronolog "${LOGPATH}/${JOB}/%Y-%m.log")
}

# Prepends date to every line of stdin, then writes to both the general and individual log files (as well as stdout).
function logboth() {
  sed "s/^/[`date +'%Y-%m-%d %H:%M:%S'`] /" | tee >(/usr/sbin/cronolog "${LOGPATH}/${JOB}/%Y-%m.log") >(/usr/sbin/cronolog "${LOGPATH}/general/%Y-%m-%d.log" -S "${LOGPATH}/current.log")
}

# If we're root instead of the rdiff-backup server user, rerun the script as it.
if [ `whoami` = 'root' ]; then
  su <%= @suser %> -c $0
else

  # Only run if this script isn't already running
  if [ $INSTANCES -lt 3 ]; then # Must be 2 processes; 1 process for this instance of the script, and 1 process for the pgrep that matches itself.
    echo $$ > $PIDFILE 2> >(log)

    echo '----------------------------------------' | log

    echo "Backup starting for '$JOB'..." | logboth
    mkdir -p "<%= @tempdest %>" 2>&1 | log
    mkdir -p "<%= @dest %>" 2>&1 | log
    nice -n 10 ssh -p <%= @port %> <%= @cuser %>@<%= @fqdn %> \
      "mysqldump <%= @db %> -f -u <%= @muser %> -p'<%= @mpass %>'<%= " --single-transaction" if @singletransaction -%>" \
      > <%= @tempdest %>/<%= @db %>.sql.part 2> >(log)

    if [ $? -ne 0 ]; then
      if [ -d <%= @dest %>/rdiff-backup-data ]; then
        echo "Backup failed for '$JOB'." | logboth
      else
        echo "First backup failed for '$JOB'." | logboth
      fi
    else
      mv "<%= @tempdest %>/<%= @db %>.sql.part" "<%= @tempdest %>/<%= @db %>.sql" 2>&1 | log

      nice -n 10 rdiff-backup <%= @args %> --backup-mode --force --create-full-path \
        "<%= @tempdest %>" "<%= @dest %>" 2>&1 | log

      if [ ${PIPESTATUS[0]} -eq 0 ]; then
        echo "Backup complete for '$JOB'." | logboth
      else
        if [ -d <%= @dest %>/rdiff-backup-data ]; then
          echo "Backup failed for '$JOB'." | logboth
        else
          echo "First backup failed for '$JOB'." | logboth
        fi
      fi

      rm -f "<%= @tempdest %>/<%= @db %>.sql.part" 2>&1 | log
      rm -f "<%= @tempdest %>/<%= @db %>.sql" 2>&1 | log
    fi

    echo "Purging backups older than <%= @period %> for '$JOB'..." | logboth
    nice -n 10 rdiff-backup --force --remove-older-than <%= @period %> '<%= @dest %>' 2>&1 | log
    if [ ${PIPESTATUS[0]} -eq 0 ]; then
      echo "Purge complete for '$JOB'." | logboth
    else
      echo "Purge failed for '$JOB'." | logboth
    fi

    rm $PIDFILE 2>&1 | log

  else
    echo "Job already running for '$JOB'; terminating." | logboth
  fi

fi
